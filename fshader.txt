#version 430

in vec4 Position;
in vec3 Normal;

// The texture containing the result of the 1st pass
layout (binding=0) uniform sampler2D RenderTex;

uniform float EdgeThreshold; // The squared threshold

// Select functionality: pass1 or pass2
subroutine vec4 RenderPassType();
subroutine uniform RenderPassType RenderPass;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};
uniform LightInfo Lights[3];

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

uniform float Weight[5]     = float[](0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162);
uniform int   PixOffsets[5] = int[](0, 1, 2, 3, 4);

out vec4 FragColor;

vec3 phongModel ( vec4 position, vec3 normal ) {

    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector

    vec3 total = vec3(0.0f, 0.0f, 0.0f);

    for( int i = 0; i < 3; i++ )
    {
        vec3 s         = normalize(vec3(Lights[i].Position - position));
        vec3 h         = normalize (v+s);

        vec3  ambient  = Lights[i].Intensity * Material.Ka;

        float sDotN    = max(dot(s, normal), 0.0);
        vec3  diffuse  = Lights[i].Intensity * Material.Kd * sDotN;
        vec3  spec     = vec3(0.0);
        if (sDotN > 0.0) {
            spec = Lights[i].Intensity * Material.Ks * pow(max(dot(h,normal), 0.0), Material.Shininess);
        }
        total += ambient + diffuse + spec;
    }
    return total;
}

subroutine (RenderPassType)
vec4 pass1() {
    return vec4(phongModel(Position, Normal), 1.0);
    //return vec4 (1.0, 0.0, 0.0, 1.0);
}

subroutine (RenderPassType)
vec4 pass2() {
    ivec2 pix = ivec2(gl_FragCoord.xy);
    vec4  sum = texelFetch(RenderTex, pix, 0) * Weight[0];

    for (int i=1; i<5; i++)
    {
        sum += texelFetchOffset(RenderTex, pix, 0, ivec2(0,  PixOffsets[i])) * Weight[i];
        sum += texelFetchOffset(RenderTex, pix, 0, ivec2(0, -PixOffsets[i])) * Weight[i];
    }

    return sum;
}

subroutine (RenderPassType)
vec4 pass3() {
    ivec2 pix = ivec2(gl_FragCoord.xy);
    vec4  sum = texelFetch(RenderTex, pix, 0) * Weight[0];

    for (int i=1; i<5; i++)
    {
        sum += texelFetchOffset(RenderTex, pix, 0, ivec2( PixOffsets[i], 0)) * Weight[i];
        sum += texelFetchOffset(RenderTex, pix, 0, ivec2(-PixOffsets[i], 0)) * Weight[i];
    }
    return sum;
}



void main()
{    
    FragColor = RenderPass();
    //FragColor = vec4 (1.0, 0.0, 0.0, 0.0);
}
